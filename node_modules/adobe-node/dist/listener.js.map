{"version":3,"file":"listener.js","sourceRoot":"","sources":["../src/listener.ts"],"names":[],"mappings":";;AACA,2BAAmD;AAEnD,IAAM,mBAAmB,GAAG,UAAC,IAAY,EAAE,IAAY,EAAE,QAAuC;IAE9F,IAAM,SAAS,GAA0B,IAAI,GAAG,EAAoB,CAAC;IACrE,IAAI,MAAc,CAAC;IACnB,IAAI,MAAa,CAAC;IAElB,SAAS,kBAAkB,CAAC,MAAc;QACxC,MAAM,GAAG,MAAM,CAAC;QAChB,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,MAAc;YAC/B,IAAM,IAAI,GAAqB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YAE7D,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;gBAC/B,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;aACvD;YAED,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,aAAa;QACpB,IAAG,MAAM,EAAE;YACT,MAAM,CAAC,GAAG,EAAE,CAAC;SACd;QACD,MAAM,GAAG,IAAI,CAAC;QACd,OAAO,CAAC,GAAG,CAAC,mDAAiD,IAAM,CAAC,CAAC;IACvE,CAAC;IAED,OAAO;QACL,gBAAgB,EAAE,UAAC,KAAa,EAAE,QAAkB;YAClD,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAI,KAAK,kCAA+B,CAAC,CAAC;aACvD;YACD,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACjC,CAAC;QACD,KAAK,EAAE;YACL,IAAI,MAAM;gBAAE,OAAO;YACnB,MAAM,GAAG,kBAAY,CAAC,kBAAkB,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE;gBACxB,OAAO,CAAC,GAAG,CAAC,qCAAmC,IAAI,SAAI,IAAM,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC;QACL,CAAC;QACD,KAAK,EAAE;YACL,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC9B,CAAC;KACF,CAAA;AACH,CAAC,CAAA;AAED,kBAAe,mBAAmB,CAAC","sourcesContent":["import { AdobeEventListener, BroadcastMessage } from './api';\nimport { Socket, Server, createServer } from 'net';\n\nconst newAdobeAppListener = (host: string, port: number, callback: (commandName: string) => void): AdobeEventListener => {\n  \n  const callbacks: Map<string, Function> = new Map<string, Function>();\n  let server: Server;\n  let client:Socket;\n\n  function connectionListener(socket: Socket) {\n    client = socket;\n    socket.on('data', (buffer: Buffer) => {\n      const data: BroadcastMessage = JSON.parse(buffer.toString());\n      \n      if (callbacks.has(data.command)) {\n        callbacks.get(data.command)(data.stdout, data.stderr);\n      }\n\n      callback(data.command);\n    });\n  }\n\n  function disposeServer() {\n    if(client) {\n      client.end();\n    }\n    server = null;\n    console.log(`Adobe Event Listener has been stopped at port ${port}`);\n  }\n\n  return {\n    addEventListener: (event: string, callback: Function): void => {\n      if (callbacks.has(event)) {\n        console.warn(`${event} listener will be overwritten`);\n      }\n      callbacks.set(event, callback);\n    },\n    start: (): void => {\n      if (server) return;\n      server = createServer(connectionListener);\n      server.listen(port, host, () => {\n        console.log(`Adobe Event Listener running at ${host}:${port}`);\n      });\n    },\n    close: (): void => {\n      server.close(disposeServer);\n    }\n  }\n}\n\nexport default newAdobeAppListener;\n"]}