{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":";;AAiBA,IAAY,YAOX;AAPD,WAAY,YAAY;IACtB,mCAAmB,CAAA;IACnB,uCAAuB,CAAA;IACvB,2CAA2B,CAAA;IAC3B,qCAAqB,CAAA;IACrB,mCAAmB,CAAA;IACnB,8CAA8B,CAAA;AAChC,CAAC,EAPW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAOvB;AAED,IAAY,sBAGX;AAHD,WAAY,sBAAsB;IAChC,uCAAa,CAAA;IACb,qCAAW,CAAA;AACb,CAAC,EAHW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAGjC;AA4ED,IAAY,aAWX;AAXD,WAAY,aAAa;IACvB,qCAAoB,CAAA;IACpB,uCAAsB,CAAA;IACtB,6CAA4B,CAAA;IAC5B,+CAA8B,CAAA;IAC9B,iDAAgC,CAAA;IAChC,iEAAgD,CAAA;IAChD,+CAA8B,CAAA;IAC9B,mDAAkC,CAAA;IAClC,oDAAmC,CAAA;IACnC,yCAAwB,CAAA;AAC1B,CAAC,EAXW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAWxB","sourcesContent":["\nexport interface AdobeApp {\n  init(): void;\n  on(event: string, callback: Function): AdobeApp;\n  runScript(command: string, options?: Options): Promise<any>;\n  selectDocument(document: string): Promise<any>;\n  saveDocument(...documents: string[]): Promise<any>;\n  saveAsDocument(document: string, saveAs: string, options?: object): Promise<any>;\n  openDocument(...documents: string[]): Promise<any>;\n  closeDocument(...documents: string[]): Promise<any>;\n  saveAndCloseDocument(...documents: string[]): Promise<any>;\n  newDocument(options?: NewDocumentOptions): Promise<any>\n  open(): Promise<any>;\n  close(): Promise<void>;\n  dispose(): void;\n}\n\nexport enum AdobeAppName {\n  Animate = 'animate',\n  Photoshop = 'photoshop',\n  Illustrator = 'illustrator',\n  InDesign = 'indesign',\n  Acrobat = 'acrobat',\n  AfterEffects = 'after_effects'\n}\n\nexport enum AdobeAppScriptFileType {\n  Jsfl = 'jsfl',\n  Jsx = 'jsx'\n}\n\nexport type AdobeProcessOptions = {\n  timeout?: number;\n  timeoutCallback?: Function;\n}\n\nexport type Options = {\n  [prop:string]:any\n}\n\nexport type NewDocumentOptions = Options & {\n  title?: string;\n  width?: number,\n  height?: number\n}\n\nexport type AdobeAppConfig = {\n  name: AdobeAppName;\n  path: string;\n  adobeScriptsPath: string;\n}\n\nexport type Config = {\n  app:AdobeAppConfig;\n  host: string;\n  port: number;\n  appTimeout?: number;\n  jsPath?: string;\n}\n\nexport interface AdobeEventListener {\n  addEventListener(event: string, callback: Function): void;\n  start(): void;\n  close(): void;\n}\n\nexport interface AdobeAppProcess {\n  create(script: string): void;\n  kill(): void;\n  run(commandPath: string): void;\n}\n\nexport interface CommandStack {\n  push(data: AdobeScriptCommand): void;\n  resolve(commandName: string): Promise<void>;\n}\n\nexport interface AdobeScriptBuilder {\n  setName(value: string): AdobeScriptBuilder;\n  setVariables(value: string): AdobeScriptBuilder;\n  setBody(value: string): AdobeScriptBuilder;\n  setBroadcast(value: string): AdobeScriptBuilder;\n  build(): string;\n}\n\nexport interface CommandFileCreator {\n  create(command: string, useBuiltInScript?: boolean, options?: Options): Promise<string>;\n}\n\nexport interface BroadcastBuilder {\n  build(command: string): string;\n}\n\nexport interface BroadcastMessage {\n  command: string;\n  stdout?: string;\n  stderr?: string;\n}\n\nexport interface AdobeScriptCommand {\n  command: string;\n  resolve: Function;\n  reject: Function;\n}\n\nexport enum AdobeAppEvent {\n  OpenApp = \"open_app\",\n  CloseApp = \"close_app\",\n  NewDocument = \"new_document\",\n  OpenDocument = \"open_document\",\n  CloseDocument = \"close_document\",\n  SaveAndCloseDocument = \"save_and_close_document\",\n  SaveDocument = \"save_document\",\n  SelectDocument = \"select_document\",\n  SaveAsDocument = \"save_as_document\",\n  RunScript = \"run_script\"\n}\n"]}